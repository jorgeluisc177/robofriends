{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/CajaBusca.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","e","mail","CajaBusca","cambioBusqueda","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","cambioEnBusqueda","evento","searchfield","target","value","fetch","then","response","json","users","robotsFiltrados","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAkBeA,EAhBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAGC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA4BH,EAA5B,cACrB,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,QCUWK,EAlBG,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OACE,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAAMY,GAAC,EACvBC,KAAMN,EAAOG,GAAGT,aCGJa,EAdG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACnB,OACC,yBAAKZ,UAAY,OAChB,2BAAOA,UAAY,mCAClBa,KAAO,SACPC,YAAc,gBACdC,SAAUH,MCOCI,EAbA,SAACC,GACf,OAMC,yBAAKC,MAAS,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,WCkBKC,E,kDAxBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHM,E,8DASAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAMzB,OAAOG,KAAKJ,MAAMC,SACjB,yDAEAG,KAAKX,MAAMK,a,GArBaQ,aCsGZC,G,wDAhGd,aAAc,IAAD,8BAIZ,gBAoCDC,iBAAmB,SAACC,GAMnB,EAAKJ,SAAS,CAACK,YAAcD,EAAOE,OAAOC,SArC3C,EAAKZ,MAAQ,CACZ,OAAW,GACX,YAAgB,IAXL,E,gEAoBO,IAAD,OAKlBa,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAInBF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAACzB,OAASqC,S,+BAmBlB,MAGuBb,KAAKJ,MAA5BpB,EAHA,EAGAA,OAAQ8B,EAHR,EAGQA,YAETQ,EAAkBtC,EAAOuC,QAAQ,SAAAC,GAGvC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAgBrD,OAAQzC,EAAO2C,OAQd,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWY,eAAgBgB,KAAKI,mBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAUsC,OATvB,2C,GA/EeZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAEP,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.5f47f5fa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\n\treturn(\n   \n  \n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='Robots' src = {`https://robohash.org/${id}?200x200`}/> \n\t\t\t<div>\n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p> {email} </p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList  = ({robots}) =>{\n\n\t return (\n\t \t <div>\n  \t\t{\n  \t\t\trobots.map((user, i) => {\n\t\t\treturn (<Card \n\t\t\tkey={i} \n\t\t\tid={robots[i].id} \n\t\t\tname={robots[i].name} e\n\t\t\tmail={robots[i].email}\n\t\t\t/>)\n\t\t})\t\n\t\t}\n  \t\t</div>\n\t );\n}\n\nexport default CardList;","import React from 'react';\n// al usar destructuring {} nos permite usar las propiedades del objeto, en este caso cambioBusqueda\nconst CajaBusca = ({cambioBusqueda}) => {\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t\t<input className = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype = 'search'\n\t\t\t\tplaceholder = 'Search Robots'\n\t\t\t\tonChange={cambioBusqueda}\n\t\t\t\t// onChange es un evento de HTML en el cual estamos siempre escuchando a que haya un cambio en el input\n\t\t\t\t// asi entonces siempre que se tenga algun cambio en el input lo vamos a asignar a cambio busqueda\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default CajaBusca;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t// dentro del div podemos definir estilos de CSS, el primer {} basicamente nos dice que vamos a correr javascript\n\t\t// y el segundo {} es un objeto que vamos a devolver, en este caso con propiedades de CSS\n\t\t// en este caso scroll nos permite crear una peque√±a ventana de 500px, dentro de esta ventana es que vamos a poder\n\t\t// hacer scroll de los elementos que hay en props.children que basicamente son los mismos de CardList \n\t\t// ya que Cardlist es el children de Scroll en App.js\n\t\t<div style = {{overflowY: 'scroll' , border: '1px solid black', height: '700px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;\n","import React , {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false,\n\t\t}\n\t}\n\t// componentDidCatch es como un try catch de JS, en caso de que haya algun error entonces se ejecuta\n\t// admite dos argumentos que son el error y la informacion\n\t// para nuestro caso solo vamos a cambiar el estado de has an error a true\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true});\n\t}\n\t//le decimos qu si hasError es verdad entonces saque ups eso no esta bien\n\t// si no simplemente que nos retorne props.children y como el children es CardList entonces nos devuelve\n\t// las props de CardList.\n\trender(){\n\t\treturn this.state.hasError ?\n\t\t\t<h1> Ups! that is not good...</h1>\n\t\t\t:\n\t\t this.props.children\n\t\t\n\t}\n};\n\nexport default ErrorBoundry;","import React,{Component} from 'react';\nimport CardList from '../Components/CardList';\nimport CajaBusca from '../Components/CajaBusca'; \nimport Scroll from \"../Components/Scroll\";\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(){\n\t\t// siempre que se tiene una clase se debe declarar un constructor, la idea es declarar el estado(STATE) aqui dentro\n\t\t// del constructor. No olvidar que como app esta heredando de Component, siempre se debe llamar a Super(que es el\n\t\t//constructor de la super clase)\n\t\tsuper()\n\t\t// aqui creamos el objeto con los esados, robots que va a tener todos los objetos con la descripcion de los robots\n\t\t// y searchfield que va a ser el que obtenga lo que escribamos en la CajaBusca, inicialmente vacio para que\n\t\t// se muestren todos los robots. Este estado es el que se va a pasar como propiedades a los elementos hijos\n\t\t// como nota aparentemente los estados se deben llamar state porque probando con otros numbres no sirve\n\t\tthis.state = {\n\t\t\t'robots' : [],\n\t\t\t'searchfield' : ''\n\t\t}\n\t}\n\n\t// el componentDidMount se corre automaticamente despues del constructor y antes del render por el \n\t// lifecycle de react. asi primero ponemos todo en blanco en el estado inicial y cuando carge la pagina\n\t// le pedimos que haga lo que esta adentro de componentDidMount, en este caso que actualice \n\t// el estado de robots con los valores de la URL especificada y actualizamos el estado para poder mostrar\n\t// los robots.\n\tcomponentDidMount(){\n\t\t// Fetch va y busca los usuarios en esa URL con el then obtenemos una respuesta y luego se hace \n\t\t//\"magia\" con el response.json Fetch es un objeto del window de los objetos y nos permite\n\t\t// hacer requests a servidores web y este https://jsonplaceholder.typicode.com/users es un servidor \n\t\t// que nos retorna un listado de usuarios que podemos usar en nuestra aplicacion\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\n\t\t\t   return response.json();\n\t\t})\n\t\t// luego hacemos un update con el setState para obtener los usuarios y tenerlos en \n\t\t// la propiedad robot que tenemos en el estado\n\t\t.then(users=>{\n\t\t\tthis.setState({robots : users})\n\t\t})\n\t\t\n\t}\n \n\n \t\t// la idea es que cada vez que cambie el atributo input se dispare un evento(que aqui llamamos evento)\n\t\t// vamos a pasar esto como propiedad a CajaBusca\n\t\t// siempre que se tenga un evento se puede poner.target.value para obtener el valor de dicho evento \n\tcambioEnBusqueda = (evento) => {\n\t\t// setState es un metodo incluido en react para actualizar los valores de los estados\n\t\t// basicamente le estamos diciendo que el estado de searchfield va a ser el valor del evento regresado\n\t\t// en este caso el valor de ese evento esta dado por lo que se escriba en el input en cajabusca\n\t\t// esto viene de estar definido en la propiedad y que en Caja Busca se tiene un evento onChange de HTML en el input\n\t\t// a mi por alguna razon no me sirvio el .setState\n\t\tthis.setState({searchfield : evento.target.value});\n\t\n\t}\n\n\trender(){\n\t\t// aqui hacemos destructuring para obtener las propiedades robots y searchfield thel estado actual o sea \n\t\t// de this.state\n\t\tconst {robots, searchfield} = this.state;\n\n\t\tconst robotsFiltrados = robots.filter( robot => {\n\t\t// si el nombre del robot en minusula incluye alguna letra del searchfield en minuscula entonces\n\t\t// retorne esos nombres se usa this.estado.searchfield ara aceder a esa propiedad de estado.\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\t// ahora accederemos a los datos desde el estado es decir this.estado.robots(el elemento robots del objeto estado) y\n\t\t// este valor es el props que le damos al componente cardlist\n\t\t// como estamos dentro de la clase se debe usar la sintaxis this.loquesea para decir que nos referimos a lo que esta \n\t\t// dentro de la clase. Se ve como si la clase fuera un objeto y para acceder a cambio en busqueda \n\t\t//entonces this.cambioEnBusqueda, ahora toca ir a CajaBusca y agregar esta propiedad a la funcion.\n\n\t\t// como se realizo destructuring y pues tenemos una funcion robotsFiltrados que me regresa solo los robots que\n\t\t// contienen la lo que se escriba en el textbox entonces es esta funcion la que se pasa como props al CardList \n\t\n\t\t// el !robots.lenght lo que esta mirando es si se tiene algun elemento dentro del array robots\n\t\t// si esta vacio robots.lenght botaria false y con el ! entonces se vuelve true por lo que \n\t\t// se ejecutaria <h1>\n\t\t// si tuviera algo botaria true y con el ! se vuelve false entonces saltaria el <h1> y se iria\n\t\t// a renderizar las cartas <div.... \n\t\treturn !robots.length ?\n\t\t// esto es una funcion tipo si xx true entonces yy si no zz donde xx es lo que esta antes del ? \n\t\t// si !robots.length verdadero entonces <h1> si no <div className...\n\n\t\t <h1>Loading</h1> :\n\n\t\t(\n// se pasa robotsFiltrados lo cual es solamente los robots que contengan lo que se va escribiendo en el input\n\t\t\t<div className='tc'> \n\t\t\t\t<h1 className='f2'> Robofriends </h1>\n\t\t\t\t<CajaBusca cambioBusqueda={this.cambioEnBusqueda}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots = {robotsFiltrados} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\t\t\n\t}\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'; \nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  \n \t<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}